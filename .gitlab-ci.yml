image: docker:19

stages:
- build dependencies
- build library
- test
- deploy pages

variables:
  BUILD_VERSION: v0.5.0

Build Boost and Emscripten:
  stage: build dependencies
  needs: []
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - cd ./dependencies/boost_emsdk
    - (docker pull registry.gitlab.com/pep10/libsim/emboost:${BUILD_VERSION} && echo success) || (docker build -t registry.gitlab.com/pep10/libsim/emboost:${BUILD_VERSION} . ) 
    - docker push registry.gitlab.com/pep10/libsim/emboost:${BUILD_VERSION}

Build Catch:
  stage: build dependencies
  needs: []
  script:
    - echo "Done"

Build Magic Enum:
  stage: build dependencies
  needs: []
  script:
    - echo "Done"

Generate documentation:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  stage: build library
  image: registry.gitlab.com/pep10/libsim/emboost:${BUILD_VERSION}
  needs: [Build Boost and Emscripten]
  script:
    - source /emsdk/emsdk_env.sh
    - npm install moxygen -g
    - mkdir -p build/docs 
    - (cd docs && doxygen)
    - mkdir -p build/docs/md && cd build/docs/md
    - moxygen ../xml
  artifacts:
    expire_in: 1 week
    paths:
      - build/docs/html/
      - build/docs/latex/
      - build/docs/xml/
      - build/docs/md/

Test C++ bindings:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  stage: test
  image: registry.gitlab.com/pep10/libsim/emboost:${BUILD_VERSION}
  needs: [Build Boost and Emscripten]
  script:
    - source /emsdk/emsdk_env.sh
    - export CXX=$(which clang++)
    - export C=$(which clang)
    - mkdir build && cd build
    - cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ../ 
    - make -j20 && make test -j20

Test emscripten bindings:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  stage: test
  image: registry.gitlab.com/pep10/libsim/emboost:${BUILD_VERSION}
  needs: [Build Boost and Emscripten]
  script:
    - source /emsdk/emsdk_env.sh
    - mkdir build && cd build
    - emcmake cmake -DBoost_INCLUDE_DIR=/boost/ -DCMAKE_BUILD_TYPE=RelWithDebInfo ../ 
    - emmake make -j20
    - emmake make test -j20
    - npm config set @pep10:registry https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/
    - npm config set '//gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken' ${CI_JOB_TOKEN}

Run coverage tests:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  stage: test
  image: registry.gitlab.com/pep10/libsim/emboost:${BUILD_VERSION}
  needs: [Build Boost and Emscripten]
  script:
    - source /emsdk/emsdk_env.sh
    # lcov_cobertura expects python3 to be named python.
    - ln -s $(which python3) /usr/bin/python
    - export CXX=$(which clang++)
    - export C=$(which clang)
    - mkdir build/coverage && cd build/coverage
    - cmake ../.. -DCMAKE_C_COMPILER=$(which clang) -DCMAKE_CXX_COMPILER=$(which clang++) -DCMAKE_BUILD_TYPE=Debug -Dcode_coverage=1
    - make -j20 && make test -j20
    - cd ../..
    - python3 llvm-cov-helper.py
    - ./lcov_cobertura.py build/coverage/coverage.lcov
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    expire_in: 100 days
    reports:
      cobertura: build/coverage/coverage.xml

pages:
  stage: deploy pages
  needs: [Generate documentation]
  artifacts:
    paths:
      - public
  dependencies:
    - Generate documentation
  script:
    - mv build/docs/html/ public
  only:
    - master
